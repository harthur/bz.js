(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// this file is the entrypoint for building a browser file with browserify

"use strict";

var bz = window.bz = require("./index");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qbGFzdGVyL3NyYy9tb3ppbGxhL2J6LmpzL3NyYy9iei5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMiLCJmaWxlIjoiL1VzZXJzL2psYXN0ZXIvc3JjL21vemlsbGEvYnouanMvc3JjL2J6LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhpcyBmaWxlIGlzIHRoZSBlbnRyeXBvaW50IGZvciBidWlsZGluZyBhIGJyb3dzZXIgZmlsZSB3aXRoIGJyb3dzZXJpZnlcblxudmFyIGJ6ID0gd2luZG93LmJ6ID0gcmVxdWlyZShcIi4vaW5kZXhcIik7Il19
},{"./index":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports.createClient = createClient;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var XMLHttpRequest = require('./xhr').XMLHttpRequest;

/**
Constant for the login entrypoint.
*/
var LOGIN = '/login';

/**
Errors related to the socket timeout.
*/
var TIMEOUT_ERRORS = ['ETIMEDOUT', 'ESOCKETTIMEDOUT'];

function extractField(id, callback) {
  if (typeof id === 'function') {
    callback = id;
    id = undefined;
  }

  return function (err, response) {
    if (err) return callback(err);

    if (response) {
      // default behavior is to use the first id when the caller does not provide one.
      if (id === undefined) {
        id = Object.keys(response)[0];
      }
      callback(null, response[id]);
    } else {
      throw "Error:, no response in extractField";
    }
  };
}

/**
Function decorator which will attempt to login to bugzilla
with the current credentials prior to making the actual api call.

    Bugzilla.prototype.method = login(function(param, param) {
    });

@param {Function} method to decorate.
@return {Function} decorated method.
*/
function loginRequired(method) {
  // we assume this is a valid bugilla instance.
  return function () {
    // remember |this| is a bugzilla instance

    // args for the decorated method
    var args = Array.prototype.slice.call(arguments),

    // we need the callback so we can pass login related errors.
    callback = args[args.length - 1];

    this.login((function (err) {
      if (err) return callback(err);

      // we are now logged in so the method can run!
      method.apply(this, args);
    }).bind(this));
  };
}

var BugzillaClient = (function () {
  function BugzillaClient(options) {
    _classCallCheck(this, BugzillaClient);

    options = options || {};

    this.username = options.username;
    this.password = options.password;
    this.timeout = options.timeout || 0;
    this.api_key = options.api_key || null;

    if (options.test) {
      throw new Error('options.test is deprecated please specify the url directly');
    }

    this.apiUrl = options.url || 'https://bugzilla.mozilla.org/rest/';
    this.apiUrl = this.apiUrl.replace(/\/$/, "");

    this._auth = null;
  }

  /**
  Authentication details for given user.
   Example:
       { id: 1222, token: 'xxxx' }
   @type {Object}
  */

  /**
  In the REST API we first login to acquire a token which is then used to make
  requests. See: http://bzr.mozilla.org/bmo/4.2/view/head:/Bugzilla/WebService/Server/REST.pm#L556
   This method can be used publicly but is designed for internal consumption for
  ease of use.
   @param {Function} callback [Error err, String token].
  */

  _createClass(BugzillaClient, [{
    key: 'login',
    value: function login(callback) {

      if (this._auth) {
        callback(null, this._auth);
      }

      if (!this.username || !this.password) {
        throw new Error('missing or invalid .username or .password');
      }

      var params = {
        login: this.username,
        password: this.password
      };

      var handleLogin = (function handleLogin(err, response) {
        if (err) return callback(err);
        if (response.result) {
          this._auth = response.result;
        } else {
          this._auth = response;
        }
        callback(null, response);
      }).bind(this);

      this.APIRequest('/login', 'GET', handleLogin, null, null, params);
    }
  }, {
    key: 'getBug',
    value: function getBug(id, params, callback) {
      if (!callback) {
        callback = params;
        params = {};
      }

      this.APIRequest('/bug/' + id, 'GET', extractField(callback), 'bugs', null, params);
    }
  }, {
    key: 'searchBugs',
    value: function searchBugs(params, callback) {
      this.APIRequest('/bug', 'GET', callback, 'bugs', null, params);
    }
  }, {
    key: 'updateBug',
    value: function updateBug(id, bug, callback) {
      this.APIRequest('/bug/' + id, 'PUT', callback, 'bugs', bug);
    }
  }, {
    key: 'createBug',
    value: function createBug(bug, callback) {
      this.APIRequest('/bug', 'POST', callback, 'id', bug);
    }
  }, {
    key: 'bugComments',
    value: function bugComments(id, callback) {
      var _callback = function _callback(e, r) {
        if (e) throw e;
        var _bug_comments = r[id];
        if (typeof _bug_comments['comments'] !== 'undefined') {
          // bugzilla 5 :(
          _bug_comments = _bug_comments.comments;
        }
        callback(null, _bug_comments);
      };

      this.APIRequest('/bug/' + id + '/comment', 'GET', _callback, 'bugs');
    }
  }, {
    key: 'addComment',
    value: function addComment(id, comment, callback) {
      this.APIRequest('/bug/' + id + '/comment', 'POST', callback, null, comment);
    }
  }, {
    key: 'bugHistory',
    value: function bugHistory(id, callback) {
      this.APIRequest('/bug/' + id + '/history', 'GET', callback, 'bugs');
    }

    /**
     * Finds all attachments for a given bug #
     * http://www.bugzilla.org/docs/tip/en/html/api/Bugzilla/WebService/Bug.html#attachments
     *
     * @param {Number} id of bug.
     * @param {Function} [Error, Array<Attachment>].
     */
  }, {
    key: 'bugAttachments',
    value: function bugAttachments(id, callback) {
      this.APIRequest('/bug/' + id + '/attachment', 'GET', extractField(id, callback), 'bugs');
    }
  }, {
    key: 'createAttachment',
    value: function createAttachment(id, attachment, callback) {
      this.APIRequest('/bug/' + id + '/attachment', 'POST', extractField(callback), 'attachments', attachment);
    }
  }, {
    key: 'getAttachment',
    value: function getAttachment(id, callback) {
      this.APIRequest('/bug/attachment/' + id, 'GET', extractField(callback), 'attachments');
    }
  }, {
    key: 'updateAttachment',
    value: function updateAttachment(id, attachment, callback) {
      this.APIRequest('/bug/attachment/' + id, 'PUT', callback, 'ok', attachment);
    }
  }, {
    key: 'searchUsers',
    value: function searchUsers(match, callback) {
      this.APIRequest('/user', 'GET', callback, 'users', null, { match: match });
    }
  }, {
    key: 'getUser',
    value: function getUser(id, callback) {
      this.APIRequest('/user/' + id, 'GET', extractField(callback), 'users');
    }
  }, {
    key: 'getSuggestedReviewers',
    value: function getSuggestedReviewers(id, callback) {
      // BMO- specific extension to get suggested reviewers for a given bug
      // http://bzr.mozilla.org/bmo/4.2/view/head:/extensions/Review/lib/WebService.pm#L102
      this.APIRequest('/review/suggestions/' + id, 'GET', callback);
    }

    /*
      XXX this call is provided for convenience to people scripting against prod bugzillq
      THERE IS NO EQUIVALENT REST CALL IN TIP, so this should not be tested against tip, hence
      the hard-coded url.
    */
  }, {
    key: 'getConfiguration',
    value: function getConfiguration(params, callback) {
      if (!callback) {
        callback = params;
        params = {};
      }

      // this.APIRequest('/configuration', 'GET', callback, null, null, params);
      // UGLAY temp fix until /configuration is implemented,
      // see https://bugzilla.mozilla.org/show_bug.cgi?id=924405#c11:
      var that = this;

      var req = new XMLHttpRequest();
      req.open('GET', 'https://api-dev.bugzilla.mozilla.org/latest/configuration', true);
      req.setRequestHeader("Accept", "application/json");
      req.onreadystatechange = function (event) {
        if (req.readyState == 4 && req.status != 0) {
          that.handleResponse(null, req, callback);
        }
      };
      req.timeout = this.timeout;
      req.ontimeout = function (event) {
        that.handleResponse('timeout', req, callback);
      };
      req.onerror = function (event) {
        that.handleResponse('error', req, callback);
      };
      req.send();
    }
  }, {
    key: 'getProducts',
    value: function getProducts(product) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        if (product === "selectable" || product === "enterable" || product === "accessible") {
          _this.APIRequest('/product?type=' + product, 'GET', function (err, products) {
            if (err) {
              return reject(err);
            } else {
              return resolve(products);
            }
          });
        } else {
          _this.APIRequest('/product/' + product, 'GET', function (err, products) {
            if (err) {
              return reject(err);
            } else {
              return resolve(products);
            }
          });
        }
      });
    }
  }, {
    key: 'getProduct',
    value: function getProduct(product) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        _this.APIRequest('/product/' + product, 'GET', function (err, product) {
          if (err) {
            return reject(err);
          } else {
            return resolve(product);
          }
        });
      });
    }
  }, {
    key: 'APIRequest',
    value: function APIRequest(path, method, callback, field, body, params) {
      if (
      // if we are doing the login
      path === LOGIN ||
      // if we are already authed
      this._auth ||
      // or we are missing auth data
      !this.password || !this.username) {
        // skip automatic authentication
        return this._APIRequest.apply(this, arguments);
      }

      var args = [].slice.call(arguments);

      this.login((function (err) {
        if (err) return callback(err);
        this._APIRequest.apply(this, args);
      }).bind(this));
    }
  }, {
    key: '_APIRequest',
    value: function _APIRequest(path, method, callback, field, body, params) {
      var url = this.apiUrl + path;

      params = params || {};

      if (this.api_key) {
        params.api_key = this.api_key;
      }

      if (this._auth) {
        params.token = this._auth.token;
      } else if (this.username && this.password) {
        params.login = this.username;
        params.password = this.password;
      }

      if (params && Object.keys(params).length > 0) {
        url += "?" + this.urlEncode(params);
      }

      body = JSON.stringify(body);

      var that = this;

      var req = new XMLHttpRequest();
      req.open(method, url, true);
      req.setRequestHeader("Accept", "application/json");
      if (method.toUpperCase() !== "GET") {
        req.setRequestHeader("Content-Type", "application/json");
      }
      req.onreadystatechange = function (event) {
        if (req.readyState == 4 && req.status != 0) {
          that.handleResponse(null, req, callback, field);
        }
      };
      req.timeout = this.timeout;
      req.ontimeout = function (event) {
        that.handleResponse('timeout', req, callback);
      };
      req.onerror = function (event) {
        that.handleResponse(event, req, callback);
      };
      req.send(body);
    }
  }, {
    key: 'handleResponse',
    value: function handleResponse(err, response, callback, field) {
      // detect timeout errors
      if (err && err.code && TIMEOUT_ERRORS.indexOf(err.code) !== -1) {
        return callback(new Error('timeout'));
      }

      // handle generic errors
      if (err) return callback(err);

      // anything in 200 status range is a success
      var requestSuccessful = response.status > 199 && response.status < 300;

      // even in the case of an unsuccessful request we may have json data.
      var parsedBody;

      try {
        parsedBody = JSON.parse(response.responseText);
      } catch (e) {
        // XXX: might want to handle this better in the request success case?
        if (requestSuccessful) {
          return callback(new Error('response was not valid json: ' + response.responseText));
        }
      }

      // detect if we're running Bugzilla 5.0
      if (typeof parsedBody['result'] !== 'undefined') {
        parsedBody = parsedBody['result'];
      }

      // successful http respnse but an error
      // XXX: this seems like a bug in the api.
      if (parsedBody && parsedBody.error) {
        requestSuccessful = false;
      }

      if (!requestSuccessful) {
        return callback(new Error('HTTP status ' + response.status + '\n' + (
        // note intentional use of != instead of !==
        parsedBody && parsedBody.message) ? parsedBody.message : ''));
      }

      callback(null, field ? parsedBody[field] : parsedBody);
    }
  }, {
    key: 'urlEncode',
    value: function urlEncode(params) {
      var url = [];
      for (var param in params) {
        var values = params[param];
        if (!values.forEach) values = [values];
        // expand any arrays
        values.forEach(function (value) {
          url.push(encodeURIComponent(param) + "=" + encodeURIComponent(value));
        });
      }
      return url.join("&");
    }
  }]);

  return BugzillaClient;
})();

exports.BugzillaClient = BugzillaClient;

function createClient(options) {
  return new BugzillaClient(options);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./xhr":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var XMLHttpRequest = null;

exports.XMLHttpRequest = XMLHttpRequest;
if (typeof window === 'undefined') {
  // we're not in a browser?
  var _loader = require;
  try {
    exports.XMLHttpRequest = XMLHttpRequest = _loader('sdk/net/xhr').XMLHttpRequest;
  } catch (e) {
    exports.XMLHttpRequest = XMLHttpRequest = _loader("xmlhttprequest").XMLHttpRequest;
  }
} else if (typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined') {
  exports.XMLHttpRequest = XMLHttpRequest = window.XMLHttpRequest;
} else {
  throw "No window, WAT.";
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qbGFzdGVyL3NyYy9tb3ppbGxhL2J6LmpzL3NyYy94aHIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7OztBQUVqQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTs7QUFFakMsTUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLE1BQUk7QUFDRixZQU5PLGNBQWMsR0FNckIsY0FBYyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxjQUFjLENBQUM7R0FDeEQsQ0FBQyxPQUFNLENBQUMsRUFBRTtBQUNULFlBUk8sY0FBYyxHQVFyQixjQUFjLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsY0FBYyxDQUFDO0dBQzNEO0NBQ0YsTUFDSSxJQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxjQUFjLEtBQUssV0FBVyxFQUFFO0FBQ3JGLFVBWlMsY0FBYyxHQVl2QixjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQztDQUN4QyxNQUNJO0FBQ0gsUUFBTSxpQkFBaUIsQ0FBQTtDQUN4QiIsImZpbGUiOiIvVXNlcnMvamxhc3Rlci9zcmMvbW96aWxsYS9iei5qcy9zcmMveGhyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBYTUxIdHRwUmVxdWVzdCA9IG51bGw7XG5cbmlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAvLyB3ZSdyZSBub3QgaW4gYSBicm93c2VyP1xuICBsZXQgX2xvYWRlciA9IHJlcXVpcmU7XG4gIHRyeSB7XG4gICAgWE1MSHR0cFJlcXVlc3QgPSBfbG9hZGVyKCdzZGsvbmV0L3hocicpLlhNTEh0dHBSZXF1ZXN0O1xuICB9IGNhdGNoKGUpIHtcbiAgICBYTUxIdHRwUmVxdWVzdCA9IF9sb2FkZXIoXCJ4bWxodHRwcmVxdWVzdFwiKS5YTUxIdHRwUmVxdWVzdDtcbiAgfVxufVxuZWxzZSBpZih0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LlhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICBYTUxIdHRwUmVxdWVzdCA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdDtcbn1cbmVsc2Uge1xuICB0aHJvdyBcIk5vIHdpbmRvdywgV0FULlwiXG59XG4iXX0=
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYnouanMiLCJzcmMvaW5kZXguanMiLCJzcmMveGhyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIHRoaXMgZmlsZSBpcyB0aGUgZW50cnlwb2ludCBmb3IgYnVpbGRpbmcgYSBicm93c2VyIGZpbGUgd2l0aCBicm93c2VyaWZ5XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYnogPSB3aW5kb3cuYnogPSByZXF1aXJlKFwiLi9pbmRleFwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5cWJHRnpkR1Z5TDNOeVl5OXRiM3BwYkd4aEwySjZMbXB6TDNOeVl5OWllaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08wRkJSVUVzU1VGQlNTeEZRVUZGTEVkQlFVY3NUVUZCVFN4RFFVRkRMRVZCUVVVc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwycHNZWE4wWlhJdmMzSmpMMjF2ZW1sc2JHRXZZbm91YW5NdmMzSmpMMko2TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnZEdocGN5Qm1hV3hsSUdseklIUm9aU0JsYm5SeWVYQnZhVzUwSUdadmNpQmlkV2xzWkdsdVp5QmhJR0p5YjNkelpYSWdabWxzWlNCM2FYUm9JR0p5YjNkelpYSnBabmxjYmx4dWRtRnlJR0o2SUQwZ2QybHVaRzkzTG1KNklEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1a1pYaGNJaWs3SWwxOSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmV4cG9ydHMuY3JlYXRlQ2xpZW50ID0gY3JlYXRlQ2xpZW50O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgnLi94aHInKS5YTUxIdHRwUmVxdWVzdDtcblxuLyoqXG5Db25zdGFudCBmb3IgdGhlIGxvZ2luIGVudHJ5cG9pbnQuXG4qL1xudmFyIExPR0lOID0gJy9sb2dpbic7XG5cbi8qKlxuRXJyb3JzIHJlbGF0ZWQgdG8gdGhlIHNvY2tldCB0aW1lb3V0LlxuKi9cbnZhciBUSU1FT1VUX0VSUk9SUyA9IFsnRVRJTUVET1VUJywgJ0VTT0NLRVRUSU1FRE9VVCddO1xuXG5mdW5jdGlvbiBleHRyYWN0RmllbGQoaWQsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGlkO1xuICAgIGlkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gdXNlIHRoZSBmaXJzdCBpZCB3aGVuIHRoZSBjYWxsZXIgZG9lcyBub3QgcHJvdmlkZSBvbmUuXG4gICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZCA9IE9iamVjdC5rZXlzKHJlc3BvbnNlKVswXTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlW2lkXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFwiRXJyb3I6LCBubyByZXNwb25zZSBpbiBleHRyYWN0RmllbGRcIjtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuRnVuY3Rpb24gZGVjb3JhdG9yIHdoaWNoIHdpbGwgYXR0ZW1wdCB0byBsb2dpbiB0byBidWd6aWxsYVxud2l0aCB0aGUgY3VycmVudCBjcmVkZW50aWFscyBwcmlvciB0byBtYWtpbmcgdGhlIGFjdHVhbCBhcGkgY2FsbC5cblxuICAgIEJ1Z3ppbGxhLnByb3RvdHlwZS5tZXRob2QgPSBsb2dpbihmdW5jdGlvbihwYXJhbSwgcGFyYW0pIHtcbiAgICB9KTtcblxuQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIHRvIGRlY29yYXRlLlxuQHJldHVybiB7RnVuY3Rpb259IGRlY29yYXRlZCBtZXRob2QuXG4qL1xuZnVuY3Rpb24gbG9naW5SZXF1aXJlZChtZXRob2QpIHtcbiAgLy8gd2UgYXNzdW1lIHRoaXMgaXMgYSB2YWxpZCBidWdpbGxhIGluc3RhbmNlLlxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIHJlbWVtYmVyIHx0aGlzfCBpcyBhIGJ1Z3ppbGxhIGluc3RhbmNlXG5cbiAgICAvLyBhcmdzIGZvciB0aGUgZGVjb3JhdGVkIG1ldGhvZFxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcblxuICAgIC8vIHdlIG5lZWQgdGhlIGNhbGxiYWNrIHNvIHdlIGNhbiBwYXNzIGxvZ2luIHJlbGF0ZWQgZXJyb3JzLlxuICAgIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuXG4gICAgdGhpcy5sb2dpbigoZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cbiAgICAgIC8vIHdlIGFyZSBub3cgbG9nZ2VkIGluIHNvIHRoZSBtZXRob2QgY2FuIHJ1biFcbiAgICAgIG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9KS5iaW5kKHRoaXMpKTtcbiAgfTtcbn1cblxudmFyIEJ1Z3ppbGxhQ2xpZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVnemlsbGFDbGllbnQob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWd6aWxsYUNsaWVudCk7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMudXNlcm5hbWUgPSBvcHRpb25zLnVzZXJuYW1lO1xuICAgIHRoaXMucGFzc3dvcmQgPSBvcHRpb25zLnBhc3N3b3JkO1xuICAgIHRoaXMudGltZW91dCA9IG9wdGlvbnMudGltZW91dCB8fCAwO1xuICAgIHRoaXMuYXBpX2tleSA9IG9wdGlvbnMuYXBpX2tleSB8fCBudWxsO1xuXG4gICAgaWYgKG9wdGlvbnMudGVzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLnRlc3QgaXMgZGVwcmVjYXRlZCBwbGVhc2Ugc3BlY2lmeSB0aGUgdXJsIGRpcmVjdGx5Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5hcGlVcmwgPSBvcHRpb25zLnVybCB8fCAnaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9yZXN0Lyc7XG4gICAgdGhpcy5hcGlVcmwgPSB0aGlzLmFwaVVybC5yZXBsYWNlKC9cXC8kLywgXCJcIik7XG5cbiAgICB0aGlzLl9hdXRoID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICBBdXRoZW50aWNhdGlvbiBkZXRhaWxzIGZvciBnaXZlbiB1c2VyLlxuICAgRXhhbXBsZTpcbiAgICAgICB7IGlkOiAxMjIyLCB0b2tlbjogJ3h4eHgnIH1cbiAgIEB0eXBlIHtPYmplY3R9XG4gICovXG5cbiAgLyoqXG4gIEluIHRoZSBSRVNUIEFQSSB3ZSBmaXJzdCBsb2dpbiB0byBhY3F1aXJlIGEgdG9rZW4gd2hpY2ggaXMgdGhlbiB1c2VkIHRvIG1ha2VcbiAgcmVxdWVzdHMuIFNlZTogaHR0cDovL2J6ci5tb3ppbGxhLm9yZy9ibW8vNC4yL3ZpZXcvaGVhZDovQnVnemlsbGEvV2ViU2VydmljZS9TZXJ2ZXIvUkVTVC5wbSNMNTU2XG4gICBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCBwdWJsaWNseSBidXQgaXMgZGVzaWduZWQgZm9yIGludGVybmFsIGNvbnN1bXB0aW9uIGZvclxuICBlYXNlIG9mIHVzZS5cbiAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFtFcnJvciBlcnIsIFN0cmluZyB0b2tlbl0uXG4gICovXG5cbiAgX2NyZWF0ZUNsYXNzKEJ1Z3ppbGxhQ2xpZW50LCBbe1xuICAgIGtleTogJ2xvZ2luJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9naW4oY2FsbGJhY2spIHtcblxuICAgICAgaWYgKHRoaXMuX2F1dGgpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcy5fYXV0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy51c2VybmFtZSB8fCAhdGhpcy5wYXNzd29yZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3Npbmcgb3IgaW52YWxpZCAudXNlcm5hbWUgb3IgLnBhc3N3b3JkJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIGxvZ2luOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZFxuICAgICAgfTtcblxuICAgICAgdmFyIGhhbmRsZUxvZ2luID0gKGZ1bmN0aW9uIGhhbmRsZUxvZ2luKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQpIHtcbiAgICAgICAgICB0aGlzLl9hdXRoID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2F1dGggPSByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICB9KS5iaW5kKHRoaXMpO1xuXG4gICAgICB0aGlzLkFQSVJlcXVlc3QoJy9sb2dpbicsICdHRVQnLCBoYW5kbGVMb2dpbiwgbnVsbCwgbnVsbCwgcGFyYW1zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRCdWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCdWcoaWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLkFQSVJlcXVlc3QoJy9idWcvJyArIGlkLCAnR0VUJywgZXh0cmFjdEZpZWxkKGNhbGxiYWNrKSwgJ2J1Z3MnLCBudWxsLCBwYXJhbXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlYXJjaEJ1Z3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2hCdWdzKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuQVBJUmVxdWVzdCgnL2J1ZycsICdHRVQnLCBjYWxsYmFjaywgJ2J1Z3MnLCBudWxsLCBwYXJhbXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUJ1ZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUJ1ZyhpZCwgYnVnLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5BUElSZXF1ZXN0KCcvYnVnLycgKyBpZCwgJ1BVVCcsIGNhbGxiYWNrLCAnYnVncycsIGJ1Zyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlQnVnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQnVnKGJ1ZywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuQVBJUmVxdWVzdCgnL2J1ZycsICdQT1NUJywgY2FsbGJhY2ssICdpZCcsIGJ1Zyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVnQ29tbWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWdDb21tZW50cyhpZCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soZSwgcikge1xuICAgICAgICBpZiAoZSkgdGhyb3cgZTtcbiAgICAgICAgdmFyIF9idWdfY29tbWVudHMgPSByW2lkXTtcbiAgICAgICAgaWYgKHR5cGVvZiBfYnVnX2NvbW1lbnRzWydjb21tZW50cyddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIGJ1Z3ppbGxhIDUgOihcbiAgICAgICAgICBfYnVnX2NvbW1lbnRzID0gX2J1Z19jb21tZW50cy5jb21tZW50cztcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhudWxsLCBfYnVnX2NvbW1lbnRzKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuQVBJUmVxdWVzdCgnL2J1Zy8nICsgaWQgKyAnL2NvbW1lbnQnLCAnR0VUJywgX2NhbGxiYWNrLCAnYnVncycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FkZENvbW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDb21tZW50KGlkLCBjb21tZW50LCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5BUElSZXF1ZXN0KCcvYnVnLycgKyBpZCArICcvY29tbWVudCcsICdQT1NUJywgY2FsbGJhY2ssIG51bGwsIGNvbW1lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2J1Z0hpc3RvcnknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWdIaXN0b3J5KGlkLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5BUElSZXF1ZXN0KCcvYnVnLycgKyBpZCArICcvaGlzdG9yeScsICdHRVQnLCBjYWxsYmFjaywgJ2J1Z3MnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbGwgYXR0YWNobWVudHMgZm9yIGEgZ2l2ZW4gYnVnICNcbiAgICAgKiBodHRwOi8vd3d3LmJ1Z3ppbGxhLm9yZy9kb2NzL3RpcC9lbi9odG1sL2FwaS9CdWd6aWxsYS9XZWJTZXJ2aWNlL0J1Zy5odG1sI2F0dGFjaG1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaWQgb2YgYnVnLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtFcnJvciwgQXJyYXk8QXR0YWNobWVudD5dLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnYnVnQXR0YWNobWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWdBdHRhY2htZW50cyhpZCwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuQVBJUmVxdWVzdCgnL2J1Zy8nICsgaWQgKyAnL2F0dGFjaG1lbnQnLCAnR0VUJywgZXh0cmFjdEZpZWxkKGlkLCBjYWxsYmFjayksICdidWdzJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlQXR0YWNobWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUF0dGFjaG1lbnQoaWQsIGF0dGFjaG1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLkFQSVJlcXVlc3QoJy9idWcvJyArIGlkICsgJy9hdHRhY2htZW50JywgJ1BPU1QnLCBleHRyYWN0RmllbGQoY2FsbGJhY2spLCAnYXR0YWNobWVudHMnLCBhdHRhY2htZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBdHRhY2htZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXR0YWNobWVudChpZCwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuQVBJUmVxdWVzdCgnL2J1Zy9hdHRhY2htZW50LycgKyBpZCwgJ0dFVCcsIGV4dHJhY3RGaWVsZChjYWxsYmFjayksICdhdHRhY2htZW50cycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUF0dGFjaG1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVBdHRhY2htZW50KGlkLCBhdHRhY2htZW50LCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5BUElSZXF1ZXN0KCcvYnVnL2F0dGFjaG1lbnQvJyArIGlkLCAnUFVUJywgY2FsbGJhY2ssICdvaycsIGF0dGFjaG1lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlYXJjaFVzZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoVXNlcnMobWF0Y2gsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLkFQSVJlcXVlc3QoJy91c2VyJywgJ0dFVCcsIGNhbGxiYWNrLCAndXNlcnMnLCBudWxsLCB7IG1hdGNoOiBtYXRjaCB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRVc2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlcihpZCwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuQVBJUmVxdWVzdCgnL3VzZXIvJyArIGlkLCAnR0VUJywgZXh0cmFjdEZpZWxkKGNhbGxiYWNrKSwgJ3VzZXJzJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U3VnZ2VzdGVkUmV2aWV3ZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkUmV2aWV3ZXJzKGlkLCBjYWxsYmFjaykge1xuICAgICAgLy8gQk1PLSBzcGVjaWZpYyBleHRlbnNpb24gdG8gZ2V0IHN1Z2dlc3RlZCByZXZpZXdlcnMgZm9yIGEgZ2l2ZW4gYnVnXG4gICAgICAvLyBodHRwOi8vYnpyLm1vemlsbGEub3JnL2Jtby80LjIvdmlldy9oZWFkOi9leHRlbnNpb25zL1Jldmlldy9saWIvV2ViU2VydmljZS5wbSNMMTAyXG4gICAgICB0aGlzLkFQSVJlcXVlc3QoJy9yZXZpZXcvc3VnZ2VzdGlvbnMvJyArIGlkLCAnR0VUJywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qXG4gICAgICBYWFggdGhpcyBjYWxsIGlzIHByb3ZpZGVkIGZvciBjb252ZW5pZW5jZSB0byBwZW9wbGUgc2NyaXB0aW5nIGFnYWluc3QgcHJvZCBidWd6aWxscVxuICAgICAgVEhFUkUgSVMgTk8gRVFVSVZBTEVOVCBSRVNUIENBTEwgSU4gVElQLCBzbyB0aGlzIHNob3VsZCBub3QgYmUgdGVzdGVkIGFnYWluc3QgdGlwLCBoZW5jZVxuICAgICAgdGhlIGhhcmQtY29kZWQgdXJsLlxuICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDb25maWd1cmF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvbihwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gcGFyYW1zO1xuICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgLy8gdGhpcy5BUElSZXF1ZXN0KCcvY29uZmlndXJhdGlvbicsICdHRVQnLCBjYWxsYmFjaywgbnVsbCwgbnVsbCwgcGFyYW1zKTtcbiAgICAgIC8vIFVHTEFZIHRlbXAgZml4IHVudGlsIC9jb25maWd1cmF0aW9uIGlzIGltcGxlbWVudGVkLFxuICAgICAgLy8gc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTkyNDQwNSNjMTE6XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHJlcS5vcGVuKCdHRVQnLCAnaHR0cHM6Ly9hcGktZGV2LmJ1Z3ppbGxhLm1vemlsbGEub3JnL2xhdGVzdC9jb25maWd1cmF0aW9uJywgdHJ1ZSk7XG4gICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0ICYmIHJlcS5zdGF0dXMgIT0gMCkge1xuICAgICAgICAgIHRoYXQuaGFuZGxlUmVzcG9uc2UobnVsbCwgcmVxLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXEudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICAgIHJlcS5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhhdC5oYW5kbGVSZXNwb25zZSgndGltZW91dCcsIHJlcSwgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoYXQuaGFuZGxlUmVzcG9uc2UoJ2Vycm9yJywgcmVxLCBjYWxsYmFjayk7XG4gICAgICB9O1xuICAgICAgcmVxLnNlbmQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQcm9kdWN0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb2R1Y3RzKHByb2R1Y3QpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAocHJvZHVjdCA9PT0gXCJzZWxlY3RhYmxlXCIgfHwgcHJvZHVjdCA9PT0gXCJlbnRlcmFibGVcIiB8fCBwcm9kdWN0ID09PSBcImFjY2Vzc2libGVcIikge1xuICAgICAgICAgIF90aGlzLkFQSVJlcXVlc3QoJy9wcm9kdWN0P3R5cGU9JyArIHByb2R1Y3QsICdHRVQnLCBmdW5jdGlvbiAoZXJyLCBwcm9kdWN0cykge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShwcm9kdWN0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuQVBJUmVxdWVzdCgnL3Byb2R1Y3QvJyArIHByb2R1Y3QsICdHRVQnLCBmdW5jdGlvbiAoZXJyLCBwcm9kdWN0cykge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShwcm9kdWN0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFByb2R1Y3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9kdWN0KHByb2R1Y3QpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBfdGhpcy5BUElSZXF1ZXN0KCcvcHJvZHVjdC8nICsgcHJvZHVjdCwgJ0dFVCcsIGZ1bmN0aW9uIChlcnIsIHByb2R1Y3QpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHByb2R1Y3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdBUElSZXF1ZXN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gQVBJUmVxdWVzdChwYXRoLCBtZXRob2QsIGNhbGxiYWNrLCBmaWVsZCwgYm9keSwgcGFyYW1zKSB7XG4gICAgICBpZiAoXG4gICAgICAvLyBpZiB3ZSBhcmUgZG9pbmcgdGhlIGxvZ2luXG4gICAgICBwYXRoID09PSBMT0dJTiB8fFxuICAgICAgLy8gaWYgd2UgYXJlIGFscmVhZHkgYXV0aGVkXG4gICAgICB0aGlzLl9hdXRoIHx8XG4gICAgICAvLyBvciB3ZSBhcmUgbWlzc2luZyBhdXRoIGRhdGFcbiAgICAgICF0aGlzLnBhc3N3b3JkIHx8ICF0aGlzLnVzZXJuYW1lKSB7XG4gICAgICAgIC8vIHNraXAgYXV0b21hdGljIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLl9BUElSZXF1ZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICB0aGlzLmxvZ2luKChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB0aGlzLl9BUElSZXF1ZXN0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSkuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX0FQSVJlcXVlc3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfQVBJUmVxdWVzdChwYXRoLCBtZXRob2QsIGNhbGxiYWNrLCBmaWVsZCwgYm9keSwgcGFyYW1zKSB7XG4gICAgICB2YXIgdXJsID0gdGhpcy5hcGlVcmwgKyBwYXRoO1xuXG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG5cbiAgICAgIGlmICh0aGlzLmFwaV9rZXkpIHtcbiAgICAgICAgcGFyYW1zLmFwaV9rZXkgPSB0aGlzLmFwaV9rZXk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hdXRoKSB7XG4gICAgICAgIHBhcmFtcy50b2tlbiA9IHRoaXMuX2F1dGgudG9rZW47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudXNlcm5hbWUgJiYgdGhpcy5wYXNzd29yZCkge1xuICAgICAgICBwYXJhbXMubG9naW4gPSB0aGlzLnVzZXJuYW1lO1xuICAgICAgICBwYXJhbXMucGFzc3dvcmQgPSB0aGlzLnBhc3N3b3JkO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zICYmIE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID4gMCkge1xuICAgICAgICB1cmwgKz0gXCI/XCIgKyB0aGlzLnVybEVuY29kZShwYXJhbXMpO1xuICAgICAgfVxuXG4gICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG5cbiAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgcmVxLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgaWYgKG1ldGhvZC50b1VwcGVyQ2FzZSgpICE9PSBcIkdFVFwiKSB7XG4gICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgIH1cbiAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09IDQgJiYgcmVxLnN0YXR1cyAhPSAwKSB7XG4gICAgICAgICAgdGhhdC5oYW5kbGVSZXNwb25zZShudWxsLCByZXEsIGNhbGxiYWNrLCBmaWVsZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXEudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICAgIHJlcS5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhhdC5oYW5kbGVSZXNwb25zZSgndGltZW91dCcsIHJlcSwgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoYXQuaGFuZGxlUmVzcG9uc2UoZXZlbnQsIHJlcSwgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICAgIHJlcS5zZW5kKGJvZHkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVJlc3BvbnNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UoZXJyLCByZXNwb25zZSwgY2FsbGJhY2ssIGZpZWxkKSB7XG4gICAgICAvLyBkZXRlY3QgdGltZW91dCBlcnJvcnNcbiAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgJiYgVElNRU9VVF9FUlJPUlMuaW5kZXhPZihlcnIuY29kZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ3RpbWVvdXQnKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGhhbmRsZSBnZW5lcmljIGVycm9yc1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cbiAgICAgIC8vIGFueXRoaW5nIGluIDIwMCBzdGF0dXMgcmFuZ2UgaXMgYSBzdWNjZXNzXG4gICAgICB2YXIgcmVxdWVzdFN1Y2Nlc3NmdWwgPSByZXNwb25zZS5zdGF0dXMgPiAxOTkgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwO1xuXG4gICAgICAvLyBldmVuIGluIHRoZSBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZXF1ZXN0IHdlIG1heSBoYXZlIGpzb24gZGF0YS5cbiAgICAgIHZhciBwYXJzZWRCb2R5O1xuXG4gICAgICB0cnkge1xuICAgICAgICBwYXJzZWRCb2R5ID0gSlNPTi5wYXJzZShyZXNwb25zZS5yZXNwb25zZVRleHQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBYWFg6IG1pZ2h0IHdhbnQgdG8gaGFuZGxlIHRoaXMgYmV0dGVyIGluIHRoZSByZXF1ZXN0IHN1Y2Nlc3MgY2FzZT9cbiAgICAgICAgaWYgKHJlcXVlc3RTdWNjZXNzZnVsKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcigncmVzcG9uc2Ugd2FzIG5vdCB2YWxpZCBqc29uOiAnICsgcmVzcG9uc2UucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZGV0ZWN0IGlmIHdlJ3JlIHJ1bm5pbmcgQnVnemlsbGEgNS4wXG4gICAgICBpZiAodHlwZW9mIHBhcnNlZEJvZHlbJ3Jlc3VsdCddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwYXJzZWRCb2R5ID0gcGFyc2VkQm9keVsncmVzdWx0J107XG4gICAgICB9XG5cbiAgICAgIC8vIHN1Y2Nlc3NmdWwgaHR0cCByZXNwbnNlIGJ1dCBhbiBlcnJvclxuICAgICAgLy8gWFhYOiB0aGlzIHNlZW1zIGxpa2UgYSBidWcgaW4gdGhlIGFwaS5cbiAgICAgIGlmIChwYXJzZWRCb2R5ICYmIHBhcnNlZEJvZHkuZXJyb3IpIHtcbiAgICAgICAgcmVxdWVzdFN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXF1ZXN0U3VjY2Vzc2Z1bCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdIVFRQIHN0YXR1cyAnICsgcmVzcG9uc2Uuc3RhdHVzICsgJ1xcbicgKyAoXG4gICAgICAgIC8vIG5vdGUgaW50ZW50aW9uYWwgdXNlIG9mICE9IGluc3RlYWQgb2YgIT09XG4gICAgICAgIHBhcnNlZEJvZHkgJiYgcGFyc2VkQm9keS5tZXNzYWdlKSA/IHBhcnNlZEJvZHkubWVzc2FnZSA6ICcnKSk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIGZpZWxkID8gcGFyc2VkQm9keVtmaWVsZF0gOiBwYXJzZWRCb2R5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cmxFbmNvZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cmxFbmNvZGUocGFyYW1zKSB7XG4gICAgICB2YXIgdXJsID0gW107XG4gICAgICBmb3IgKHZhciBwYXJhbSBpbiBwYXJhbXMpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHBhcmFtc1twYXJhbV07XG4gICAgICAgIGlmICghdmFsdWVzLmZvckVhY2gpIHZhbHVlcyA9IFt2YWx1ZXNdO1xuICAgICAgICAvLyBleHBhbmQgYW55IGFycmF5c1xuICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB1cmwucHVzaChlbmNvZGVVUklDb21wb25lbnQocGFyYW0pICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsLmpvaW4oXCImXCIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCdWd6aWxsYUNsaWVudDtcbn0pKCk7XG5cbmV4cG9ydHMuQnVnemlsbGFDbGllbnQgPSBCdWd6aWxsYUNsaWVudDtcblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50KG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBCdWd6aWxsYUNsaWVudChvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5cWJHRnpkR1Z5TDNOeVl5OXRiM3BwYkd4aEwySjZMbXB6TDNOeVl5OXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdRVUZCUVN4SlFVRk5MR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkRPenM3T3p0QlFVdDJSQ3hKUVVGTkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTTdPenM3TzBGQlMzWkNMRWxCUVUwc1kwRkJZeXhIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03TzBGQlJYaEVMRk5CUVZNc1dVRkJXU3hEUVVGRExFVkJRVVVzUlVGQlJTeFJRVUZSTEVWQlFVVTdRVUZEYkVNc1RVRkJTU3hQUVVGUExFVkJRVVVzUzBGQlN5eFZRVUZWTEVWQlFVVTdRVUZETlVJc1dVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5rTEUxQlFVVXNSMEZCUnl4VFFVRlRMRU5CUVVNN1IwRkRhRUk3TzBGQlJVUXNVMEZCVHl4VlFVRlRMRWRCUVVjc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRE4wSXNVVUZCU1N4SFFVRkhMRVZCUVVVc1QwRkJUeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdPMEZCUlRsQ0xGRkJRVWtzVVVGQlVTeEZRVUZGT3p0QlFVVmFMRlZCUVVrc1JVRkJSU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU53UWl4VlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRQUVVNdlFqdEJRVU5FTEdOQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZET1VJc1RVRkRTVHRCUVVOSUxGbEJRVTBzY1VOQlFYRkRMRU5CUVVNN1MwRkROME03UjBGRFJpeERRVUZETzBOQlEwZzdPenM3T3pzN096czdPenRCUVZsRUxGTkJRVk1zWVVGQllTeERRVUZETEUxQlFVMHNSVUZCUlRzN1FVRkZOMElzVTBGQlR5eFpRVUZYT3pzN08wRkJTV2hDTEZGQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN096dEJRVVUxUXl4WlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSWEpETEZGQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRU3hWUVVGVExFZEJRVWNzUlVGQlJUdEJRVU4yUWl4VlFVRkpMRWRCUVVjc1JVRkJSU3hQUVVGUExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXpzN08wRkJSemxDTEZsQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6RkNMRU5CUVVFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTm1MRU5CUVVNN1EwRkRTRHM3UVVGRlRTeEpRVUZKTEdOQlFXTTdRVUZGV2l4WFFVWkdMR05CUVdNc1EwRkZXQ3hQUVVGUExFVkJRVVU3TUVKQlJsb3NZMEZCWXpzN1FVRkhja0lzVjBGQlR5eEhRVUZITEU5QlFVOHNTVUZCU1N4RlFVRkZMRU5CUVVNN08wRkJSWGhDTEZGQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU5xUXl4UlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTTdRVUZEYWtNc1VVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOd1F5eFJRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZET3p0QlFVVjJReXhSUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZEYUVJc1dVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5dzBSRUZCTkVRc1EwRkJReXhEUVVGRE8wdEJReTlGT3p0QlFVVkVMRkZCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZETEVkQlFVY3NTVUZCU1N4dlEwRkJiME1zUTBGQlF6dEJRVU5zUlN4UlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdRVUZGTjBNc1VVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdSMEZEYmtJN096czdPenM3T3pzN096czdPenM3TzJWQmJFSlJMR05CUVdNN08xZEJkVU5xUWl4bFFVRkRMRkZCUVZFc1JVRkJSVHM3UVVGRlppeFZRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRaQ3huUWtGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VDBGRE5VSTdPMEZCUlVRc1ZVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRM0JETEdOQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc01rTkJRVEpETEVOQlFVTXNRMEZCUXp0UFFVTTVSRHM3UVVGRlJDeFZRVUZKTEUxQlFVMHNSMEZCUnp0QlFVTllMR0ZCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVUdEJRVU53UWl4blFrRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTzA5QlEzaENMRU5CUVVNN08wRkJSVVlzVlVGQlNTeFhRVUZYTEVkQlFVY3NRMEZCUVN4VFFVRlRMRmRCUVZjc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlEzQkVMRmxCUVVrc1IwRkJSeXhGUVVGRkxFOUJRVThzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpsQ0xGbEJRVWtzVVVGQlVTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTnVRaXhqUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVFN1UwRkROMElzVFVGRFNUdEJRVU5JTEdOQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRE8xTkJRM1pDTzBGQlEwUXNaMEpCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdUMEZETVVJc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZZaXhWUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRia1U3T3p0WFFVVk5MR2RDUVVGRExFVkJRVVVzUlVGQlJTeE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZPMEZCUXpWQ0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEV2l4blFrRkJVU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU5zUWl4alFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE8wOUJRMlE3TzBGQlJVUXNWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkRZaXhQUVVGUExFZEJRVWNzUlVGQlJTeEZRVU5hTEV0QlFVc3NSVUZEVEN4WlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRM1JDTEUxQlFVMHNSVUZEVGl4SlFVRkpMRVZCUTBvc1RVRkJUU3hEUVVOUUxFTkJRVU03UzBGRFNEczdPMWRCUlZVc2IwSkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlR0QlFVTTFRaXhWUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRhRVU3T3p0WFFVVlRMRzFDUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNVVUZCVVN4RlFVRkZPMEZCUXpWQ0xGVkJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTEUxQlFVMHNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRMUVVNM1JEczdPMWRCUlZNc2JVSkJRVU1zUjBGQlJ5eEZRVUZGTEZGQlFWRXNSVUZCUlR0QlFVTjRRaXhWUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVTjBSRHM3TzFkQlJWY3NjVUpCUVVNc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEJRVU42UWl4VlFVRkpMRk5CUVZNc1IwRkJSeXhUUVVGYUxGTkJRVk1zUTBGQldTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMEZCUXpkQ0xGbEJRVWtzUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTJZc1dVRkJTU3hoUVVGaExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpGQ0xGbEJRVWtzVDBGQlR5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1YwRkJWeXhGUVVGRk96dEJRVVZ3UkN4MVFrRkJZU3hIUVVGSExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTTdVMEZEZUVNN1FVRkRSQ3huUWtGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRQUVVNdlFpeERRVUZCT3p0QlFVVkVMRlZCUVVrc1EwRkJReXhWUVVGVkxFTkJRMklzVDBGQlR5eEhRVUZITEVWQlFVVXNSMEZCUnl4VlFVRlZMRVZCUTNwQ0xFdEJRVXNzUlVGRFRDeFRRVUZUTEVWQlExUXNUVUZCVFN4RFFVTlFMRU5CUVVNN1MwRkRTRHM3TzFkQlJWVXNiMEpCUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVTdRVUZEYWtNc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGRFlpeFBRVUZQTEVkQlFVY3NSVUZCUlN4SFFVRkhMRlZCUVZVc1JVRkRla0lzVFVGQlRTeEZRVU5PTEZGQlFWRXNSVUZEVWl4SlFVRkpMRVZCUTBvc1QwRkJUeXhEUVVOU0xFTkJRVU03UzBGRFNEczdPMWRCUlZVc2IwSkJRVU1zUlVGQlJTeEZRVUZGTEZGQlFWRXNSVUZCUlR0QlFVTjRRaXhWUVVGSkxFTkJRVU1zVlVGQlZTeERRVU5pTEU5QlFVOHNSMEZCUnl4RlFVRkZMRWRCUVVjc1ZVRkJWU3hGUVVONlFpeExRVUZMTEVWQlEwd3NVVUZCVVN4RlFVTlNMRTFCUVUwc1EwRkRVQ3hEUVVGRE8wdEJRMGc3T3pzN096czdPenM3TzFkQlUyTXNkMEpCUVVNc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEJRVU0xUWl4VlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVOaUxFOUJRVThzUjBGQlJ5eEZRVUZGTEVkQlFVY3NZVUZCWVN4RlFVTTFRaXhMUVVGTExFVkJRMHdzV1VGQldTeERRVUZETEVWQlFVVXNSVUZCUlN4UlFVRlJMRU5CUVVNc1JVRkRNVUlzVFVGQlRTeERRVU5RTEVOQlFVTTdTMEZEU0RzN08xZEJSV2RDTERCQ1FVRkRMRVZCUVVVc1JVRkJSU3hWUVVGVkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlF6RkRMRlZCUVVrc1EwRkJReXhWUVVGVkxFTkJRMklzVDBGQlR5eEhRVUZITEVWQlFVVXNSMEZCUnl4aFFVRmhMRVZCUXpWQ0xFMUJRVTBzUlVGRFRpeFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUTNSQ0xHRkJRV0VzUlVGRFlpeFZRVUZWTEVOQlExZ3NRMEZCUXp0TFFVTklPenM3VjBGRllTeDFRa0ZCUXl4RlFVRkZMRVZCUVVVc1VVRkJVU3hGUVVGRk8wRkJRek5DTEZWQlFVa3NRMEZCUXl4VlFVRlZMRU5CUTJJc2EwSkJRV3RDTEVkQlFVY3NSVUZCUlN4RlFVTjJRaXhMUVVGTExFVkJRMHdzV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVTjBRaXhoUVVGaExFTkJRMlFzUTBGQlF6dExRVU5JT3pzN1YwRkZaMElzTUVKQlFVTXNSVUZCUlN4RlFVRkZMRlZCUVZVc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRE1VTXNWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1MwRkROMFU3T3p0WFFVVlhMSEZDUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVTdRVUZETlVJc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJReXhEUVVGRExFTkJRVU03UzBGRE1VVTdPenRYUVVWUExHbENRVUZETEVWQlFVVXNSVUZCUlN4UlFVRlJMRVZCUVVVN1FVRkRja0lzVlVGQlNTeERRVUZETEZWQlFWVXNRMEZEWWl4UlFVRlJMRWRCUVVjc1JVRkJSU3hGUVVOaUxFdEJRVXNzUlVGRFRDeFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUTNSQ0xFOUJRVThzUTBGRFVpeERRVUZETzB0QlEwZzdPenRYUVVWeFFpd3JRa0ZCUXl4RlFVRkZMRVZCUVVVc1VVRkJVU3hGUVVGRk96czdRVUZIYmtNc1ZVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eHpRa0ZCYzBJc1IwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXk5RU96czdPenM3T3pzN1YwRlBaMElzTUVKQlFVTXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSVHRCUVVOc1F5eFZRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTFvc1owSkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEYkVJc1kwRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dFBRVU5rT3pzN096dEJRVXRFTEZWQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenM3UVVGRmFFSXNWVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hqUVVGakxFVkJRVVVzUTBGQlF6dEJRVU12UWl4VFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTd3lSRUZCTWtRc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU51Uml4VFFVRkhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR3RDUVVGclFpeERRVUZETEVOQlFVTTdRVUZEYmtRc1UwRkJSeXhEUVVGRExHdENRVUZyUWl4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRk8wRkJRM2hETEZsQlFVa3NSMEZCUnl4RFFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRVZCUVVVN1FVRkRNVU1zWTBGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzFOQlF6RkRPMDlCUTBZc1EwRkJRenRCUVVOR0xGTkJRVWNzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRCUVVNelFpeFRRVUZITEVOQlFVTXNVMEZCVXl4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRk8wRkJReTlDTEZsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0UFFVTXZReXhEUVVGRE8wRkJRMFlzVTBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRXRCUVVzc1JVRkJSVHRCUVVNM1FpeFpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdUMEZETjBNc1EwRkJRenRCUVVOR0xGTkJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0TFFVTmFPenM3VjBGRlZ5eHhRa0ZCUXl4UFFVRlBMRVZCUVVVN1FVRkRjRUlzVlVGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTJwQ0xHRkJRVThzU1VGQlNTeFBRVUZQTEVOQlFVTXNWVUZCVXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRek5ETEZsQlFVa3NUMEZCVHl4TFFVRkxMRmxCUVZrc1NVRkJTU3hQUVVGUExFdEJRVXNzVjBGQlZ5eEpRVUZKTEU5QlFVOHNTMEZCU3l4WlFVRlpMRVZCUVVjN1FVRkRjRVlzWlVGQlN5eERRVUZETEZWQlFWVXNRMEZEWkN4blFrRkJaMElzUjBGQlJ5eFBRVUZQTEVWQlF6RkNMRXRCUVVzc1JVRkRUQ3hWUVVGVExFZEJRVWNzUlVGQlJTeFJRVUZSTEVWQlFVVTdRVUZEZEVJc1owSkJRVWNzUjBGQlJ5eEZRVUZGTzBGQlEwNHNjVUpCUVU4c1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJGQlEzQkNMRTFCUVUwN1FVRkRUQ3h4UWtGQlR5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1lVRkRNVUk3VjBGRFJpeERRVU5HTEVOQlFVTTdVMEZEU0N4TlFVRk5PMEZCUTB3c1pVRkJTeXhEUVVGRExGVkJRVlVzUTBGRFpDeFhRVUZYTEVkQlFVY3NUMEZCVHl4RlFVTnlRaXhMUVVGTExFVkJRMHdzVlVGQlV5eEhRVUZITEVWQlFVVXNVVUZCVVN4RlFVRkZPMEZCUTNSQ0xHZENRVUZITEVkQlFVY3NSVUZCUlR0QlFVTk9MSEZDUVVGUExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0aFFVTndRaXhOUVVGTk8wRkJRMHdzY1VKQlFVOHNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8yRkJRekZDTzFkQlEwWXNRMEZEUml4RFFVRkRPMU5CUTBnN1QwRkRSaXhEUVVGRExFTkJRVU03UzBGRFNqczdPMWRCUlZVc2IwSkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEyNUNMRlZCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU5xUWl4aFFVRlBMRWxCUVVrc1QwRkJUeXhEUVVGRExGVkJRVk1zVDBGQlR5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTXpReXhoUVVGTExFTkJRVU1zVlVGQlZTeERRVU5rTEZkQlFWY3NSMEZCUnl4UFFVRlBMRVZCUTNKQ0xFdEJRVXNzUlVGRFRDeFZRVUZUTEVkQlFVY3NSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRia0lzWTBGQlJ5eEhRVUZITEVWQlFVVTdRVUZEVGl4dFFrRkJUeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdWMEZEY0VJc1RVRkJUVHRCUVVOTUxHMUNRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRYUVVONlFqdFRRVU5HTEVOQlEwb3NRMEZCUXp0UFFVTklMRU5CUVVNc1EwRkJRenRMUVVOS096czdWMEZGVlN4dlFrRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU4yUkRzN1FVRkZSU3hWUVVGSkxFdEJRVXNzUzBGQlN6czdRVUZGWkN4VlFVRkpMRU5CUVVNc1MwRkJTenM3UVVGRlZpeFBRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVU5vUXpzN1FVRkZRU3hsUVVGUExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dFBRVU5vUkRzN1FVRkZSQ3hWUVVGSkxFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6czdRVUZGY0VNc1ZVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTEZWQlFWTXNSMEZCUnl4RlFVRkZPMEZCUTNaQ0xGbEJRVWtzUjBGQlJ5eEZRVUZGTEU5QlFVOHNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemxDTEZsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UFFVTndReXhEUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRaanM3TzFkQlJWY3NjVUpCUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRGVFUXNWVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTTdPMEZCUlRkQ0xGbEJRVTBzUjBGQlJ5eE5RVUZOTEVsQlFVa3NSVUZCUlN4RFFVRkRPenRCUVVWMFFpeFZRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1FVRkJSU3hqUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1QwRkJSVHM3UVVGRmJrUXNWVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMlFzWTBGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF6dFBRVU5xUXl4TlFVTkpMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTNaRExHTkJRVTBzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRCUVVNM1FpeGpRVUZOTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VDBGRGFrTTdPMEZCUlVRc1ZVRkJTU3hOUVVGTkxFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlF6VkRMRmRCUVVjc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRQUVVOeVF6czdRVUZGUkN4VlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZOVUlzVlVGQlNTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRCUVVWb1FpeFZRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMR05CUVdNc1JVRkJSU3hEUVVGRE8wRkJReTlDTEZOQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTTFRaXhUUVVGSExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1FVRkRia1FzVlVGQlNTeE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZMRXRCUVVzc1MwRkJTeXhGUVVGRk8wRkJRMnhETEZkQlFVY3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eGpRVUZqTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dFBRVU14UkR0QlFVTkVMRk5CUVVjc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4VlFVRlZMRXRCUVVzc1JVRkJSVHRCUVVONFF5eFpRVUZKTEVkQlFVY3NRMEZCUXl4VlFVRlZMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUXpGRExHTkJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVMEZEYWtRN1QwRkRSaXhEUVVGRE8wRkJRMFlzVTBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRE8wRkJRek5DTEZOQlFVY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVU3UVVGREwwSXNXVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFVkJRVVVzUjBGQlJ5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMDlCUXk5RExFTkJRVU03UVVGRFJpeFRRVUZITEVOQlFVTXNUMEZCVHl4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRk8wRkJRemRDTEZsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0UFFVTXpReXhEUVVGRE8wRkJRMFlzVTBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOb1FqczdPMWRCUldNc2QwSkJRVU1zUjBGQlJ5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRk96dEJRVVU1UXl4VlFVRkpMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeEpRVUZKTEdOQlFXTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUXpsRUxHVkJRVThzVVVGQlVTeERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03VDBGRGRrTTdPenRCUVVkRUxGVkJRVWtzUjBGQlJ5eEZRVUZGTEU5QlFVOHNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE96czdRVUZIT1VJc1ZVRkJTU3hwUWtGQmFVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeFJRVUZSTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJRenM3TzBGQlIzWkZMRlZCUVVrc1ZVRkJWU3hEUVVGRE96dEJRVVZtTEZWQlFVazdRVUZEUml4clFrRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wOUJRMmhFTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN08wRkJSVllzV1VGQlNTeHBRa0ZCYVVJc1JVRkJSVHRCUVVOeVFpeHBRa0ZCVHl4UlFVRlJMRU5CUTJJc1NVRkJTU3hMUVVGTExFTkJRVU1zSzBKQlFTdENMRWRCUVVjc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVU51UlN4RFFVRkRPMU5CUTBnN1QwRkRSanM3TzBGQlIwUXNWVUZCU1N4UFFVRlBMRlZCUVZVc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eFhRVUZYTEVWQlFVVTdRVUZETDBNc2EwSkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1QwRkRia003T3pzN1FVRkpSQ3hWUVVGSkxGVkJRVlVzU1VGQlNTeFZRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZPMEZCUTJ4RExIbENRVUZwUWl4SFFVRkhMRXRCUVVzc1EwRkJRenRQUVVNelFqczdRVUZGUkN4VlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVTdRVUZEZEVJc1pVRkJUeXhSUVVGUkxFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlEzWkNMR05CUVdNc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVazdPMEZCUlhSRExHdENRVUZWTEVsQlFVa3NWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJRU3hCUVVGRExFZEJRVWNzVlVGQlZTeERRVUZETEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUXpkRUxFTkJRVU1zUTBGQlF6dFBRVU5LT3p0QlFVVkVMR05CUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUVVGQlF5eExRVUZMTEVkQlFVa3NWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF5eERRVUZETzB0QlF6RkVPenM3VjBGRlV5eHRRa0ZCUXl4TlFVRk5MRVZCUVVVN1FVRkRha0lzVlVGQlNTeEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTJJc1YwRkJTU3hKUVVGSkxFdEJRVXNzU1VGQlNTeE5RVUZOTEVWQlFVVTdRVUZEZGtJc1dVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpOQ0xGbEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVTm9RaXhOUVVGTkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXpzN1FVRkZjRUlzWTBGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlRMRXRCUVVzc1JVRkJSVHRCUVVNMVFpeGhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkRkRU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU12UWl4RFFVRkRMRU5CUVVNN1QwRkRTanRCUVVORUxHRkJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRMUVVOMFFqczdPMU5CYUZwUkxHTkJRV003U1VGcFduaENMRU5CUVVFN096czdRVUZGVFN4VFFVRlRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRGNFTXNVMEZCVHl4SlFVRkpMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dERRVU53UXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12YW14aGMzUmxjaTl6Y21NdmJXOTZhV3hzWVM5aWVpNXFjeTl6Y21NdmFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCWVRVeElkSFJ3VW1WeGRXVnpkQ0E5SUhKbGNYVnBjbVVvSnk0dmVHaHlKeWt1V0UxTVNIUjBjRkpsY1hWbGMzUTdYRzVjYmk4cUtseHVRMjl1YzNSaGJuUWdabTl5SUhSb1pTQnNiMmRwYmlCbGJuUnllWEJ2YVc1MExseHVLaTljYm1OdmJuTjBJRXhQUjBsT0lEMGdKeTlzYjJkcGJpYzdYRzVjYmk4cUtseHVSWEp5YjNKeklISmxiR0YwWldRZ2RHOGdkR2hsSUhOdlkydGxkQ0IwYVcxbGIzVjBMbHh1S2k5Y2JtTnZibk4wSUZSSlRVVlBWVlJmUlZKU1QxSlRJRDBnV3lkRlZFbE5SVVJQVlZRbkxDQW5SVk5QUTB0RlZGUkpUVVZFVDFWVUoxMDdYRzVjYm1aMWJtTjBhVzl1SUdWNGRISmhZM1JHYVdWc1pDaHBaQ3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJwWkNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJR05oYkd4aVlXTnJJRDBnYVdRN1hHNGdJQ0FnYVdRZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9aWEp5TENCeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUdsbUlDaGxjbklwSUhKbGRIVnliaUJqWVd4c1ltRmpheWhsY25JcE8xeHVYRzRnSUNBZ2FXWWdLSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0F2THlCa1pXWmhkV3gwSUdKbGFHRjJhVzl5SUdseklIUnZJSFZ6WlNCMGFHVWdabWx5YzNRZ2FXUWdkMmhsYmlCMGFHVWdZMkZzYkdWeUlHUnZaWE1nYm05MElIQnliM1pwWkdVZ2IyNWxMbHh1SUNBZ0lDQWdhV1lnS0dsa0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXUWdQU0JQWW1wbFkzUXVhMlY1Y3loeVpYTndiMjV6WlNsYk1GMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZV3hzWW1GamF5aHVkV3hzTENCeVpYTndiMjV6WlZ0cFpGMHBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lGd2lSWEp5YjNJNkxDQnVieUJ5WlhOd2IyNXpaU0JwYmlCbGVIUnlZV04wUm1sbGJHUmNJanRjYmlBZ0lDQjlYRzRnSUgwN1hHNTlYRzVjYmk4cUtseHVSblZ1WTNScGIyNGdaR1ZqYjNKaGRHOXlJSGRvYVdOb0lIZHBiR3dnWVhSMFpXMXdkQ0IwYnlCc2IyZHBiaUIwYnlCaWRXZDZhV3hzWVZ4dWQybDBhQ0IwYUdVZ1kzVnljbVZ1ZENCamNtVmtaVzUwYVdGc2N5QndjbWx2Y2lCMGJ5QnRZV3RwYm1jZ2RHaGxJR0ZqZEhWaGJDQmhjR2tnWTJGc2JDNWNibHh1SUNBZ0lFSjFaM3BwYkd4aExuQnliM1J2ZEhsd1pTNXRaWFJvYjJRZ1BTQnNiMmRwYmlobWRXNWpkR2x2Ymlod1lYSmhiU3dnY0dGeVlXMHBJSHRjYmlBZ0lDQjlLVHRjYmx4dVFIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2JXVjBhRzlrSUhSdklHUmxZMjl5WVhSbExseHVRSEpsZEhWeWJpQjdSblZ1WTNScGIyNTlJR1JsWTI5eVlYUmxaQ0J0WlhSb2IyUXVYRzRxTDF4dVpuVnVZM1JwYjI0Z2JHOW5hVzVTWlhGMWFYSmxaQ2h0WlhSb2IyUXBJSHRjYmlBZ0x5OGdkMlVnWVhOemRXMWxJSFJvYVhNZ2FYTWdZU0IyWVd4cFpDQmlkV2RwYkd4aElHbHVjM1JoYm1ObExseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdMeThnY21WdFpXMWlaWElnZkhSb2FYTjhJR2x6SUdFZ1luVm5lbWxzYkdFZ2FXNXpkR0Z1WTJWY2JseHVJQ0FnSUM4dklHRnlaM01nWm05eUlIUm9aU0JrWldOdmNtRjBaV1FnYldWMGFHOWtYRzRnSUNBZ2RtRnlJR0Z5WjNNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXBMRnh1SUNBZ0lDQWdJQ0F2THlCM1pTQnVaV1ZrSUhSb1pTQmpZV3hzWW1GamF5QnpieUIzWlNCallXNGdjR0Z6Y3lCc2IyZHBiaUJ5Wld4aGRHVmtJR1Z5Y205eWN5NWNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkyc2dQU0JoY21kelcyRnlaM011YkdWdVozUm9JQzBnTVYwN1hHNWNiaUFnSUNCMGFHbHpMbXh2WjJsdUtHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnYVdZZ0tHVnljaWtnY21WMGRYSnVJR05oYkd4aVlXTnJLR1Z5Y2lrN1hHNWNiaUFnSUNBZ0lDOHZJSGRsSUdGeVpTQnViM2NnYkc5bloyVmtJR2x1SUhOdklIUm9aU0J0WlhSb2IyUWdZMkZ1SUhKMWJpRmNiaUFnSUNBZ0lHMWxkR2h2WkM1aGNIQnNlU2gwYUdsekxDQmhjbWR6S1R0Y2JpQWdJQ0I5TG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdkbUZ5SUVKMVozcHBiR3hoUTJ4cFpXNTBJRDBnWTJ4aGMzTWdlMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0FnSUhSb2FYTXVkWE5sY201aGJXVWdQU0J2Y0hScGIyNXpMblZ6WlhKdVlXMWxPMXh1SUNBZ0lIUm9hWE11Y0dGemMzZHZjbVFnUFNCdmNIUnBiMjV6TG5CaGMzTjNiM0prTzF4dUlDQWdJSFJvYVhNdWRHbHRaVzkxZENBOUlHOXdkR2x2Ym5NdWRHbHRaVzkxZENCOGZDQXdPMXh1SUNBZ0lIUm9hWE11WVhCcFgydGxlU0E5SUc5d2RHbHZibk11WVhCcFgydGxlU0I4ZkNCdWRXeHNPMXh1WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk11ZEdWemRDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHZjSFJwYjI1ekxuUmxjM1FnYVhNZ1pHVndjbVZqWVhSbFpDQndiR1ZoYzJVZ2MzQmxZMmxtZVNCMGFHVWdkWEpzSUdScGNtVmpkR3g1SnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWhjR2xWY213Z1BTQnZjSFJwYjI1ekxuVnliQ0I4ZkNBbmFIUjBjSE02THk5aWRXZDZhV3hzWVM1dGIzcHBiR3hoTG05eVp5OXlaWE4wTHljN1hHNGdJQ0FnZEdocGN5NWhjR2xWY213Z1BTQjBhR2x6TG1Gd2FWVnliQzV5WlhCc1lXTmxLQzljWEM4a0x5d2dYQ0pjSWlrN1hHNWNiaUFnSUNCMGFHbHpMbDloZFhSb0lEMGdiblZzYkR0Y2JpQWdmVnh1SUNBdktpcGNiaUFnUVhWMGFHVnVkR2xqWVhScGIyNGdaR1YwWVdsc2N5Qm1iM0lnWjJsMlpXNGdkWE5sY2k1Y2JseHVJQ0JGZUdGdGNHeGxPbHh1WEc0Z0lDQWdJQ0I3SUdsa09pQXhNakl5TENCMGIydGxiam9nSjNoNGVIZ25JSDFjYmx4dUlDQkFkSGx3WlNCN1QySnFaV04wZlZ4dUlDQXFMMXh1WEc1Y2JpQWdMeW9xWEc0Z0lFbHVJSFJvWlNCU1JWTlVJRUZRU1NCM1pTQm1hWEp6ZENCc2IyZHBiaUIwYnlCaFkzRjFhWEpsSUdFZ2RHOXJaVzRnZDJocFkyZ2dhWE1nZEdobGJpQjFjMlZrSUhSdklHMWhhMlZjYmlBZ2NtVnhkV1Z6ZEhNdUlGTmxaVG9nYUhSMGNEb3ZMMko2Y2k1dGIzcHBiR3hoTG05eVp5OWliVzh2TkM0eUwzWnBaWGN2YUdWaFpEb3ZRblZuZW1sc2JHRXZWMlZpVTJWeWRtbGpaUzlUWlhKMlpYSXZVa1ZUVkM1d2JTTk1OVFUyWEc1Y2JpQWdWR2hwY3lCdFpYUm9iMlFnWTJGdUlHSmxJSFZ6WldRZ2NIVmliR2xqYkhrZ1luVjBJR2x6SUdSbGMybG5ibVZrSUdadmNpQnBiblJsY201aGJDQmpiMjV6ZFcxd2RHbHZiaUJtYjNKY2JpQWdaV0Z6WlNCdlppQjFjMlV1WEc1Y2JpQWdRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMkZzYkdKaFkyc2dXMFZ5Y205eUlHVnljaXdnVTNSeWFXNW5JSFJ2YTJWdVhTNWNiaUFnS2k5Y2JpQWdiRzluYVc0Z0tHTmhiR3hpWVdOcktTQjdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZZWFYwYUNrZ2UxeHVJQ0FnSUNBZ1kyRnNiR0poWTJzb2JuVnNiQ3dnZEdocGN5NWZZWFYwYUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5WelpYSnVZVzFsSUh4OElDRjBhR2x6TG5CaGMzTjNiM0prS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjIxcGMzTnBibWNnYjNJZ2FXNTJZV3hwWkNBdWRYTmxjbTVoYldVZ2IzSWdMbkJoYzNOM2IzSmtKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhCaGNtRnRjeUE5SUh0Y2JpQWdJQ0FnSUd4dloybHVPaUIwYUdsekxuVnpaWEp1WVcxbExGeHVJQ0FnSUNBZ2NHRnpjM2R2Y21RNklIUm9hWE11Y0dGemMzZHZjbVJjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkbUZ5SUdoaGJtUnNaVXh2WjJsdUlEMGdablZ1WTNScGIyNGdhR0Z1Wkd4bFRHOW5hVzRvWlhKeUxDQnlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdhV1lnS0dWeWNpa2djbVYwZFhKdUlHTmhiR3hpWVdOcktHVnljaWs3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpjRzl1YzJVdWNtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGMWRHZ2dQU0J5WlhOd2IyNXpaUzV5WlhOMWJIUmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloZFhSb0lEMGdjbVZ6Y0c5dWMyVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZV3hzWW1GamF5aHVkV3hzTENCeVpYTndiMjV6WlNrN1hHNGdJQ0FnZlM1aWFXNWtLSFJvYVhNcE8xeHVYRzRnSUNBZ2RHaHBjeTVCVUVsU1pYRjFaWE4wS0NjdmJHOW5hVzRuTENBblIwVlVKeXdnYUdGdVpHeGxURzluYVc0c0lHNTFiR3dzSUc1MWJHd3NJSEJoY21GdGN5azdYRzRnSUgxY2JseHVJQ0JuWlhSQ2RXY2dLR2xrTENCd1lYSmhiWE1zSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnYVdZZ0tDRmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJR05oYkd4aVlXTnJJRDBnY0dGeVlXMXpPMXh1SUNBZ0lDQWdJSEJoY21GdGN5QTlJSHQ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVFWQkpVbVZ4ZFdWemRDaGNiaUFnSUNBZ0lDY3ZZblZuTHljZ0t5QnBaQ3hjYmlBZ0lDQWdJQ2RIUlZRbkxGeHVJQ0FnSUNBZ1pYaDBjbUZqZEVacFpXeGtLR05oYkd4aVlXTnJLU3hjYmlBZ0lDQWdJQ2RpZFdkekp5eGNiaUFnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0J3WVhKaGJYTmNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdjMlZoY21Ob1FuVm5jeUFvY0dGeVlXMXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJSFJvYVhNdVFWQkpVbVZ4ZFdWemRDZ25MMkoxWnljc0lDZEhSVlFuTENCallXeHNZbUZqYXl3Z0oySjFaM01uTENCdWRXeHNMQ0J3WVhKaGJYTXBPMXh1SUNCOVhHNWNiaUFnZFhCa1lYUmxRblZuSUNocFpDd2dZblZuTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVRVkJKVW1WeGRXVnpkQ2duTDJKMVp5OG5JQ3NnYVdRc0lDZFFWVlFuTENCallXeHNZbUZqYXl3Z0oySjFaM01uTENCaWRXY3BPMXh1SUNCOVhHNWNiaUFnWTNKbFlYUmxRblZuSUNoaWRXY3NJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdkR2hwY3k1QlVFbFNaWEYxWlhOMEtDY3ZZblZuSnl3Z0oxQlBVMVFuTENCallXeHNZbUZqYXl3Z0oybGtKeXdnWW5WbktUdGNiaUFnZlZ4dVhHNGdJR0oxWjBOdmJXMWxiblJ6SUNocFpDd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjJZWElnWDJOaGJHeGlZV05ySUQwZ1puVnVZM1JwYjI0b1pTd2djaWtnZTF4dUlDQWdJQ0FnYVdZZ0tHVXBJSFJvY205M0lHVTdYRzRnSUNBZ0lDQjJZWElnWDJKMVoxOWpiMjF0Wlc1MGN5QTlJSEpiYVdSZE8xeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmZZblZuWDJOdmJXMWxiblJ6V3lkamIyMXRaVzUwY3lkZElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJpZFdkNmFXeHNZU0ExSURvb1hHNGdJQ0FnSUNBZ0lGOWlkV2RmWTI5dGJXVnVkSE1nUFNCZlluVm5YMk52YlcxbGJuUnpMbU52YlcxbGJuUnpPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMkZzYkdKaFkyc29iblZzYkN3Z1gySjFaMTlqYjIxdFpXNTBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1QlVFbFNaWEYxWlhOMEtGeHVJQ0FnSUNBZ0p5OWlkV2N2SnlBcklHbGtJQ3NnSnk5amIyMXRaVzUwSnl4Y2JpQWdJQ0FnSUNkSFJWUW5MRnh1SUNBZ0lDQWdYMk5oYkd4aVlXTnJMRnh1SUNBZ0lDQWdKMkoxWjNNblhHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHRmtaRU52YlcxbGJuUWdLR2xrTENCamIyMXRaVzUwTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVRVkJKVW1WeGRXVnpkQ2hjYmlBZ0lDQWdJQ2N2WW5Wbkx5Y2dLeUJwWkNBcklDY3ZZMjl0YldWdWRDY3NYRzRnSUNBZ0lDQW5VRTlUVkNjc1hHNGdJQ0FnSUNCallXeHNZbUZqYXl4Y2JpQWdJQ0FnSUc1MWJHd3NYRzRnSUNBZ0lDQmpiMjF0Wlc1MFhHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHSjFaMGhwYzNSdmNua2dLR2xrTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVRVkJKVW1WeGRXVnpkQ2hjYmlBZ0lDQWdJQ2N2WW5Wbkx5Y2dLeUJwWkNBcklDY3ZhR2x6ZEc5eWVTY3NYRzRnSUNBZ0lDQW5SMFZVSnl4Y2JpQWdJQ0FnSUdOaGJHeGlZV05yTEZ4dUlDQWdJQ0FnSjJKMVozTW5YRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYVc1a2N5QmhiR3dnWVhSMFlXTm9iV1Z1ZEhNZ1ptOXlJR0VnWjJsMlpXNGdZblZuSUNOY2JpQWdJQ29nYUhSMGNEb3ZMM2QzZHk1aWRXZDZhV3hzWVM1dmNtY3ZaRzlqY3k5MGFYQXZaVzR2YUhSdGJDOWhjR2t2UW5WbmVtbHNiR0V2VjJWaVUyVnlkbWxqWlM5Q2RXY3VhSFJ0YkNOaGRIUmhZMmh0Wlc1MGMxeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdhV1FnYjJZZ1luVm5MbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmJSWEp5YjNJc0lFRnljbUY1UEVGMGRHRmphRzFsYm5RK1hTNWNiaUFnSUNvdlhHNGdJR0oxWjBGMGRHRmphRzFsYm5SeklDaHBaQ3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0IwYUdsekxrRlFTVkpsY1hWbGMzUW9YRzRnSUNBZ0lDQW5MMkoxWnk4bklDc2dhV1FnS3lBbkwyRjBkR0ZqYUcxbGJuUW5MRnh1SUNBZ0lDQWdKMGRGVkNjc1hHNGdJQ0FnSUNCbGVIUnlZV04wUm1sbGJHUW9hV1FzSUdOaGJHeGlZV05yS1N4Y2JpQWdJQ0FnSUNkaWRXZHpKMXh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0JqY21WaGRHVkJkSFJoWTJodFpXNTBJQ2hwWkN3Z1lYUjBZV05vYldWdWRDd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjBhR2x6TGtGUVNWSmxjWFZsYzNRb1hHNGdJQ0FnSUNBbkwySjFaeThuSUNzZ2FXUWdLeUFuTDJGMGRHRmphRzFsYm5RbkxGeHVJQ0FnSUNBZ0oxQlBVMVFuTEZ4dUlDQWdJQ0FnWlhoMGNtRmpkRVpwWld4a0tHTmhiR3hpWVdOcktTeGNiaUFnSUNBZ0lDZGhkSFJoWTJodFpXNTBjeWNzWEc0Z0lDQWdJQ0JoZEhSaFkyaHRaVzUwWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFRjBkR0ZqYUcxbGJuUWdLR2xrTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVRVkJKVW1WeGRXVnpkQ2hjYmlBZ0lDQWdJQ2N2WW5WbkwyRjBkR0ZqYUcxbGJuUXZKeUFySUdsa0xGeHVJQ0FnSUNBZ0owZEZWQ2NzWEc0Z0lDQWdJQ0JsZUhSeVlXTjBSbWxsYkdRb1kyRnNiR0poWTJzcExGeHVJQ0FnSUNBZ0oyRjBkR0ZqYUcxbGJuUnpKMXh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0IxY0dSaGRHVkJkSFJoWTJodFpXNTBJQ2hwWkN3Z1lYUjBZV05vYldWdWRDd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjBhR2x6TGtGUVNWSmxjWFZsYzNRb0p5OWlkV2N2WVhSMFlXTm9iV1Z1ZEM4bklDc2dhV1FzSUNkUVZWUW5MQ0JqWVd4c1ltRmpheXdnSjI5ckp5d2dZWFIwWVdOb2JXVnVkQ2s3WEc0Z0lIMWNibHh1SUNCelpXRnlZMmhWYzJWeWN5QW9iV0YwWTJnc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2RHaHBjeTVCVUVsU1pYRjFaWE4wS0NjdmRYTmxjaWNzSUNkSFJWUW5MQ0JqWVd4c1ltRmpheXdnSjNWelpYSnpKeXdnYm5Wc2JDd2dlMjFoZEdOb09pQnRZWFJqYUgwcE8xeHVJQ0I5WEc1Y2JpQWdaMlYwVlhObGNpQW9hV1FzSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZEdocGN5NUJVRWxTWlhGMVpYTjBLRnh1SUNBZ0lDQWdKeTkxYzJWeUx5Y2dLeUJwWkN4Y2JpQWdJQ0FnSUNkSFJWUW5MRnh1SUNBZ0lDQWdaWGgwY21GamRFWnBaV3hrS0dOaGJHeGlZV05yS1N4Y2JpQWdJQ0FnSUNkMWMyVnljeWRjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnWjJWMFUzVm5aMlZ6ZEdWa1VtVjJhV1YzWlhKeklDaHBaQ3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0F2THlCQ1RVOHRJSE53WldOcFptbGpJR1Y0ZEdWdWMybHZiaUIwYnlCblpYUWdjM1ZuWjJWemRHVmtJSEpsZG1sbGQyVnljeUJtYjNJZ1lTQm5hWFpsYmlCaWRXZGNiaUFnSUNBdkx5Qm9kSFJ3T2k4dllucHlMbTF2ZW1sc2JHRXViM0puTDJKdGJ5ODBMakl2ZG1sbGR5OW9aV0ZrT2k5bGVIUmxibk5wYjI1ekwxSmxkbWxsZHk5c2FXSXZWMlZpVTJWeWRtbGpaUzV3YlNOTU1UQXlYRzRnSUNBZ2RHaHBjeTVCVUVsU1pYRjFaWE4wS0NjdmNtVjJhV1YzTDNOMVoyZGxjM1JwYjI1ekx5Y2dLeUJwWkN3Z0owZEZWQ2NzSUdOaGJHeGlZV05yS1R0Y2JpQWdmVnh1WEc0Z0lDOHFYRzRnSUNBZ1dGaFlJSFJvYVhNZ1kyRnNiQ0JwY3lCd2NtOTJhV1JsWkNCbWIzSWdZMjl1ZG1WdWFXVnVZMlVnZEc4Z2NHVnZjR3hsSUhOamNtbHdkR2x1WnlCaFoyRnBibk4wSUhCeWIyUWdZblZuZW1sc2JIRmNiaUFnSUNCVVNFVlNSU0JKVXlCT1R5QkZVVlZKVmtGTVJVNVVJRkpGVTFRZ1EwRk1UQ0JKVGlCVVNWQXNJSE52SUhSb2FYTWdjMmh2ZFd4a0lHNXZkQ0JpWlNCMFpYTjBaV1FnWVdkaGFXNXpkQ0IwYVhBc0lHaGxibU5sWEc0Z0lDQWdkR2hsSUdoaGNtUXRZMjlrWldRZ2RYSnNMbHh1SUNBcUwxeHVJQ0JuWlhSRGIyNW1hV2QxY21GMGFXOXVJQ2h3WVhKaGJYTXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdhV1lnS0NGallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lHTmhiR3hpWVdOcklEMGdjR0Z5WVcxek8xeHVJQ0FnSUNBZ0lIQmhjbUZ0Y3lBOUlIdDlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSFJvYVhNdVFWQkpVbVZ4ZFdWemRDZ25MMk52Ym1acFozVnlZWFJwYjI0bkxDQW5SMFZVSnl3Z1kyRnNiR0poWTJzc0lHNTFiR3dzSUc1MWJHd3NJSEJoY21GdGN5azdYRzRnSUNBZ0x5OGdWVWRNUVZrZ2RHVnRjQ0JtYVhnZ2RXNTBhV3dnTDJOdmJtWnBaM1Z5WVhScGIyNGdhWE1nYVcxd2JHVnRaVzUwWldRc1hHNGdJQ0FnTHk4Z2MyVmxJR2gwZEhCek9pOHZZblZuZW1sc2JHRXViVzk2YVd4c1lTNXZjbWN2YzJodmQxOWlkV2N1WTJkcFAybGtQVGt5TkRRd05TTmpNVEU2WEc0Z0lDQWdiR1YwSUhSb1lYUWdQU0IwYUdsek8xeHVYRzRnSUNBZ2RtRnlJSEpsY1NBOUlHNWxkeUJZVFV4SWRIUndVbVZ4ZFdWemRDZ3BPMXh1SUNBZ0lISmxjUzV2Y0dWdUtDZEhSVlFuTENBbmFIUjBjSE02THk5aGNHa3RaR1YyTG1KMVozcHBiR3hoTG0xdmVtbHNiR0V1YjNKbkwyeGhkR1Z6ZEM5amIyNW1hV2QxY21GMGFXOXVKeXdnZEhKMVpTazdYRzRnSUNBZ2NtVnhMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9YQ0pCWTJObGNIUmNJaXdnWENKaGNIQnNhV05oZEdsdmJpOXFjMjl1WENJcE8xeHVJQ0FnSUhKbGNTNXZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWdQU0JtZFc1amRHbHZiaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJR2xtSUNoeVpYRXVjbVZoWkhsVGRHRjBaU0E5UFNBMElDWW1JSEpsY1M1emRHRjBkWE1nSVQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0IwYUdGMExtaGhibVJzWlZKbGMzQnZibk5sS0c1MWJHd3NJSEpsY1N3Z1kyRnNiR0poWTJzcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnY21WeExuUnBiV1Z2ZFhRZ1BTQjBhR2x6TG5ScGJXVnZkWFE3WEc0Z0lDQWdjbVZ4TG05dWRHbHRaVzkxZENBOUlHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2RHaGhkQzVvWVc1a2JHVlNaWE53YjI1elpTZ25kR2x0Wlc5MWRDY3NJSEpsY1N3Z1kyRnNiR0poWTJzcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnY21WeExtOXVaWEp5YjNJZ1BTQm1kVzVqZEdsdmJpQW9aWFpsYm5RcElIdGNiaUFnSUNBZ0lIUm9ZWFF1YUdGdVpHeGxVbVZ6Y0c5dWMyVW9KMlZ5Y205eUp5d2djbVZ4TENCallXeHNZbUZqYXlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0J5WlhFdWMyVnVaQ2dwTzF4dUlDQjlYRzVjYmlBZ1oyVjBVSEp2WkhWamRITWdLSEJ5YjJSMVkzUXBJSHRjYmlBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUdsbUtDQndjbTlrZFdOMElEMDlQU0JjSW5ObGJHVmpkR0ZpYkdWY0lpQjhmQ0J3Y205a2RXTjBJRDA5UFNCY0ltVnVkR1Z5WVdKc1pWd2lJSHg4SUhCeWIyUjFZM1FnUFQwOUlGd2lZV05qWlhOemFXSnNaVndpSUNrZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1QlVFbFNaWEYxWlhOMEtGeHVJQ0FnSUNBZ0lDQWdJQ2N2Y0hKdlpIVmpkRDkwZVhCbFBTY2dLeUJ3Y205a2RXTjBMRnh1SUNBZ0lDQWdJQ0FnSUNkSFJWUW5MRnh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1S0dWeWNpd2djSEp2WkhWamRITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNod2NtOWtkV04wY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVFWQkpVbVZ4ZFdWemRDaGNiaUFnSUNBZ0lDQWdJQ0FuTDNCeWIyUjFZM1F2SnlBcklIQnliMlIxWTNRc1hHNGdJQ0FnSUNBZ0lDQWdKMGRGVkNjc1hHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNG9aWEp5TENCd2NtOWtkV04wY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLSEJ5YjJSMVkzUnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQm5aWFJRY205a2RXTjBJQ2h3Y205a2RXTjBLU0I3WEc0Z0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVCVUVsU1pYRjFaWE4wS0Z4dUlDQWdJQ0FnSUNBbkwzQnliMlIxWTNRdkp5QXJJSEJ5YjJSMVkzUXNYRzRnSUNBZ0lDQWdJQ2RIUlZRbkxGeHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpaGxjbklzSUhCeWIyUjFZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaHdjbTlrZFdOMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnUVZCSlVtVnhkV1Z6ZENBb2NHRjBhQ3dnYldWMGFHOWtMQ0JqWVd4c1ltRmpheXdnWm1sbGJHUXNJR0p2Wkhrc0lIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDOHZJR2xtSUhkbElHRnlaU0JrYjJsdVp5QjBhR1VnYkc5bmFXNWNiaUFnSUNBZ0lIQmhkR2dnUFQwOUlFeFBSMGxPSUh4OFhHNGdJQ0FnSUNBdkx5QnBaaUIzWlNCaGNtVWdZV3h5WldGa2VTQmhkWFJvWldSY2JpQWdJQ0FnSUhSb2FYTXVYMkYxZEdnZ2ZIeGNiaUFnSUNBZ0lDOHZJRzl5SUhkbElHRnlaU0J0YVhOemFXNW5JR0YxZEdnZ1pHRjBZVnh1SUNBZ0lDQWdJWFJvYVhNdWNHRnpjM2R2Y21RZ2ZId2dJWFJvYVhNdWRYTmxjbTVoYldWY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUM4dklITnJhWEFnWVhWMGIyMWhkR2xqSUdGMWRHaGxiblJwWTJGMGFXOXVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmUVZCSlVtVnhkV1Z6ZEM1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JoY21keklEMGdXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNcE8xeHVYRzRnSUNBZ2RHaHBjeTVzYjJkcGJpaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUdsbUlDaGxjbklwSUhKbGRIVnliaUJqWVd4c1ltRmpheWhsY25JcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmUVZCSlVtVnhkV1Z6ZEM1aGNIQnNlU2gwYUdsekxDQmhjbWR6S1R0Y2JpQWdJQ0I5TG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0I5WEc1Y2JpQWdYMEZRU1ZKbGNYVmxjM1FnS0hCaGRHZ3NJRzFsZEdodlpDd2dZMkZzYkdKaFkyc3NJR1pwWld4a0xDQmliMlI1TENCd1lYSmhiWE1wSUh0Y2JpQWdJQ0JzWlhRZ2RYSnNJRDBnZEdocGN5NWhjR2xWY213Z0t5QndZWFJvTzF4dVhHNGdJQ0FnY0dGeVlXMXpJRDBnY0dGeVlXMXpJSHg4SUh0OU8xeHVYRzRnSUNBZ2FXWW9kR2hwY3k1aGNHbGZhMlY1S1NCN0lIQmhjbUZ0Y3k1aGNHbGZhMlY1SUQwZ2RHaHBjeTVoY0dsZmEyVjVPeUI5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWVhWMGFDa2dlMXh1SUNBZ0lDQWdjR0Z5WVcxekxuUnZhMlZ1SUQwZ2RHaHBjeTVmWVhWMGFDNTBiMnRsYmp0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1MWMyVnlibUZ0WlNBbUppQjBhR2x6TG5CaGMzTjNiM0prS1NCN1hHNGdJQ0FnSUNCd1lYSmhiWE11Ykc5bmFXNGdQU0IwYUdsekxuVnpaWEp1WVcxbE8xeHVJQ0FnSUNBZ2NHRnlZVzF6TG5CaGMzTjNiM0prSUQwZ2RHaHBjeTV3WVhOemQyOXlaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvY0dGeVlXMXpJQ1ltSUU5aWFtVmpkQzVyWlhsektIQmhjbUZ0Y3lrdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdkWEpzSUNzOUlGd2lQMXdpSUNzZ2RHaHBjeTUxY214RmJtTnZaR1VvY0dGeVlXMXpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmliMlI1SUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvWW05a2VTazdYRzVjYmlBZ0lDQnNaWFFnZEdoaGRDQTlJSFJvYVhNN1hHNWNiaUFnSUNCMllYSWdjbVZ4SUQwZ2JtVjNJRmhOVEVoMGRIQlNaWEYxWlhOMEtDazdYRzRnSUNBZ2NtVnhMbTl3Wlc0b2JXVjBhRzlrTENCMWNtd3NJSFJ5ZFdVcE8xeHVJQ0FnSUhKbGNTNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtGd2lRV05qWlhCMFhDSXNJRndpWVhCd2JHbGpZWFJwYjI0dmFuTnZibHdpS1R0Y2JpQWdJQ0JwWmlBb2JXVjBhRzlrTG5SdlZYQndaWEpEWVhObEtDa2dJVDA5SUZ3aVIwVlVYQ0lwSUh0Y2JpQWdJQ0FnSUhKbGNTNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtGd2lRMjl1ZEdWdWRDMVVlWEJsWENJc0lGd2lZWEJ3YkdsallYUnBiMjR2YW5OdmJsd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVnhMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUdaMWJtTjBhVzl1SUNobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tISmxjUzV5WldGa2VWTjBZWFJsSUQwOUlEUWdKaVlnY21WeExuTjBZWFIxY3lBaFBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUhSb1lYUXVhR0Z1Wkd4bFVtVnpjRzl1YzJVb2JuVnNiQ3dnY21WeExDQmpZV3hzWW1GamF5d2dabWxsYkdRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnY21WeExuUnBiV1Z2ZFhRZ1BTQjBhR2x6TG5ScGJXVnZkWFE3WEc0Z0lDQWdjbVZ4TG05dWRHbHRaVzkxZENBOUlHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2RHaGhkQzVvWVc1a2JHVlNaWE53YjI1elpTZ25kR2x0Wlc5MWRDY3NJSEpsY1N3Z1kyRnNiR0poWTJzcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnY21WeExtOXVaWEp5YjNJZ1BTQm1kVzVqZEdsdmJpQW9aWFpsYm5RcElIdGNiaUFnSUNBZ0lIUm9ZWFF1YUdGdVpHeGxVbVZ6Y0c5dWMyVW9aWFpsYm5Rc0lISmxjU3dnWTJGc2JHSmhZMnNwTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVZ4TG5ObGJtUW9ZbTlrZVNrN1hHNGdJSDFjYmx4dUlDQm9ZVzVrYkdWU1pYTndiMjV6WlNBb1pYSnlMQ0J5WlhOd2IyNXpaU3dnWTJGc2JHSmhZMnNzSUdacFpXeGtLU0I3WEc0Z0lDQWdMeThnWkdWMFpXTjBJSFJwYldWdmRYUWdaWEp5YjNKelhHNGdJQ0FnYVdZZ0tHVnljaUFtSmlCbGNuSXVZMjlrWlNBbUppQlVTVTFGVDFWVVgwVlNVazlTVXk1cGJtUmxlRTltS0dWeWNpNWpiMlJsS1NBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWh1WlhjZ1JYSnliM0lvSjNScGJXVnZkWFFuS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2FHRnVaR3hsSUdkbGJtVnlhV01nWlhKeWIzSnpYRzRnSUNBZ2FXWWdLR1Z5Y2lrZ2NtVjBkWEp1SUdOaGJHeGlZV05yS0dWeWNpazdYRzVjYmlBZ0lDQXZMeUJoYm5sMGFHbHVaeUJwYmlBeU1EQWdjM1JoZEhWeklISmhibWRsSUdseklHRWdjM1ZqWTJWemMxeHVJQ0FnSUhaaGNpQnlaWEYxWlhOMFUzVmpZMlZ6YzJaMWJDQTlJSEpsYzNCdmJuTmxMbk4wWVhSMWN5QStJREU1T1NBbUppQnlaWE53YjI1elpTNXpkR0YwZFhNZ1BDQXpNREE3WEc1Y2JpQWdJQ0F2THlCbGRtVnVJR2x1SUhSb1pTQmpZWE5sSUc5bUlHRnVJSFZ1YzNWalkyVnpjMloxYkNCeVpYRjFaWE4wSUhkbElHMWhlU0JvWVhabElHcHpiMjRnWkdGMFlTNWNiaUFnSUNCMllYSWdjR0Z5YzJWa1FtOWtlVHRjYmx4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCd1lYSnpaV1JDYjJSNUlEMGdTbE5QVGk1d1lYSnpaU2h5WlhOd2IyNXpaUzV5WlhOd2IyNXpaVlJsZUhRcE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDOHZJRmhZV0RvZ2JXbG5hSFFnZDJGdWRDQjBieUJvWVc1a2JHVWdkR2hwY3lCaVpYUjBaWElnYVc0Z2RHaGxJSEpsY1hWbGMzUWdjM1ZqWTJWemN5QmpZWE5sUDF4dUlDQWdJQ0FnYVdZZ0tISmxjWFZsYzNSVGRXTmpaWE56Wm5Wc0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0J1WlhjZ1JYSnliM0lvSjNKbGMzQnZibk5sSUhkaGN5QnViM1FnZG1Gc2FXUWdhbk52YmpvZ0p5QXJJSEpsYzNCdmJuTmxMbkpsYzNCdmJuTmxWR1Y0ZENsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmtaWFJsWTNRZ2FXWWdkMlVuY21VZ2NuVnVibWx1WnlCQ2RXZDZhV3hzWVNBMUxqQmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIQmhjbk5sWkVKdlpIbGJKM0psYzNWc2RDZGRJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdjR0Z5YzJWa1FtOWtlU0E5SUhCaGNuTmxaRUp2WkhsYkozSmxjM1ZzZENkZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklITjFZMk5sYzNObWRXd2dhSFIwY0NCeVpYTndibk5sSUdKMWRDQmhiaUJsY25KdmNseHVJQ0FnSUM4dklGaFlXRG9nZEdocGN5QnpaV1Z0Y3lCc2FXdGxJR0VnWW5WbklHbHVJSFJvWlNCaGNHa3VYRzRnSUNBZ2FXWWdLSEJoY25ObFpFSnZaSGtnSmlZZ2NHRnljMlZrUW05a2VTNWxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ2NtVnhkV1Z6ZEZOMVkyTmxjM05tZFd3Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lYSmxjWFZsYzNSVGRXTmpaWE56Wm5Wc0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kyRnNiR0poWTJzb2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQW5TRlJVVUNCemRHRjBkWE1nSnlBcklISmxjM0J2Ym5ObExuTjBZWFIxY3lBcklDZGNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0x5OGdibTkwWlNCcGJuUmxiblJwYjI1aGJDQjFjMlVnYjJZZ0lUMGdhVzV6ZEdWaFpDQnZaaUFoUFQxY2JpQWdJQ0FnSUNBZ0tIQmhjbk5sWkVKdlpIa2dKaVlnY0dGeWMyVmtRbTlrZVM1dFpYTnpZV2RsS1NBL0lIQmhjbk5sWkVKdlpIa3ViV1Z6YzJGblpTQTZJQ2NuWEc0Z0lDQWdJQ0FwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqWVd4c1ltRmpheWh1ZFd4c0xDQW9abWxsYkdRcElEOGdjR0Z5YzJWa1FtOWtlVnRtYVdWc1pGMGdPaUJ3WVhKelpXUkNiMlI1S1R0Y2JpQWdmVnh1WEc0Z0lIVnliRVZ1WTI5a1pTQW9jR0Z5WVcxektTQjdYRzRnSUNBZ2RtRnlJSFZ5YkNBOUlGdGRPMXh1SUNBZ0lHWnZjaWgyWVhJZ2NHRnlZVzBnYVc0Z2NHRnlZVzF6S1NCN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdWeklEMGdjR0Z5WVcxelczQmhjbUZ0WFR0Y2JpQWdJQ0FnSUdsbUtDRjJZV3gxWlhNdVptOXlSV0ZqYUNsY2JpQWdJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ1czWmhiSFZsYzEwN1hHNGdJQ0FnSUNBdkx5QmxlSEJoYm1RZ1lXNTVJR0Z5Y21GNWMxeHVJQ0FnSUNBZ2RtRnNkV1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUhWeWJDNXdkWE5vS0dWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENod1lYSmhiU2tnS3lCY0lqMWNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lHVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaDJZV3gxWlNrcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIxY213dWFtOXBiaWhjSWlaY0lpazdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpVTnNhV1Z1ZENodmNIUnBiMjV6S1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUW5WbmVtbHNiR0ZEYkdsbGJuUW9iM0IwYVc5dWN5azdYRzU5WEc0aVhYMD0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIFhNTEh0dHBSZXF1ZXN0ID0gbnVsbDtcblxuZXhwb3J0cy5YTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0O1xuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIHdlJ3JlIG5vdCBpbiBhIGJyb3dzZXI/XG4gIHZhciBfbG9hZGVyID0gcmVxdWlyZTtcbiAgdHJ5IHtcbiAgICBleHBvcnRzLlhNTEh0dHBSZXF1ZXN0ID0gWE1MSHR0cFJlcXVlc3QgPSBfbG9hZGVyKCdzZGsvbmV0L3hocicpLlhNTEh0dHBSZXF1ZXN0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXhwb3J0cy5YTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0ID0gX2xvYWRlcihcInhtbGh0dHByZXF1ZXN0XCIpLlhNTEh0dHBSZXF1ZXN0O1xuICB9XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gIGV4cG9ydHMuWE1MSHR0cFJlcXVlc3QgPSBYTUxIdHRwUmVxdWVzdCA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdDtcbn0gZWxzZSB7XG4gIHRocm93IFwiTm8gd2luZG93LCBXQVQuXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXFiR0Z6ZEdWeUwzTnlZeTl0YjNwcGJHeGhMMko2TG1wekwzTnlZeTk0YUhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlR5eEpRVUZKTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNN096dEJRVVZxUXl4SlFVRkpMRTlCUVU4c1RVRkJUU3hMUVVGTExGZEJRVmNzUlVGQlJUczdRVUZGYWtNc1RVRkJTU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzBGQlEzUkNMRTFCUVVrN1FVRkRSaXhaUVU1UExHTkJRV01zUjBGTmNrSXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVTTdSMEZEZUVRc1EwRkJReXhQUVVGTkxFTkJRVU1zUlVGQlJUdEJRVU5VTEZsQlVrOHNZMEZCWXl4SFFWRnlRaXhqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETzBkQlF6TkVPME5CUTBZc1RVRkRTU3hKUVVGSExFOUJRVThzVFVGQlRTeExRVUZMTEZkQlFWY3NTVUZCU1N4UFFVRlBMRTFCUVUwc1EwRkJReXhqUVVGakxFdEJRVXNzVjBGQlZ5eEZRVUZGTzBGQlEzSkdMRlZCV2xNc1kwRkJZeXhIUVZsMlFpeGpRVUZqTEVkQlFVY3NUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJRenREUVVONFF5eE5RVU5KTzBGQlEwZ3NVVUZCVFN4cFFrRkJhVUlzUTBGQlFUdERRVU40UWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12YW14aGMzUmxjaTl6Y21NdmJXOTZhV3hzWVM5aWVpNXFjeTl6Y21NdmVHaHlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUhaaGNpQllUVXhJZEhSd1VtVnhkV1Z6ZENBOUlHNTFiR3c3WEc1Y2JtbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0F2THlCM1pTZHlaU0J1YjNRZ2FXNGdZU0JpY205M2MyVnlQMXh1SUNCc1pYUWdYMnh2WVdSbGNpQTlJSEpsY1hWcGNtVTdYRzRnSUhSeWVTQjdYRzRnSUNBZ1dFMU1TSFIwY0ZKbGNYVmxjM1FnUFNCZmJHOWhaR1Z5S0NkelpHc3ZibVYwTDNob2NpY3BMbGhOVEVoMGRIQlNaWEYxWlhOME8xeHVJQ0I5SUdOaGRHTm9LR1VwSUh0Y2JpQWdJQ0JZVFV4SWRIUndVbVZ4ZFdWemRDQTlJRjlzYjJGa1pYSW9YQ0o0Yld4b2RIUndjbVZ4ZFdWemRGd2lLUzVZVFV4SWRIUndVbVZ4ZFdWemREdGNiaUFnZlZ4dWZWeHVaV3h6WlNCcFppaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnZDJsdVpHOTNMbGhOVEVoMGRIQlNaWEYxWlhOMElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0JZVFV4SWRIUndVbVZ4ZFdWemRDQTlJSGRwYm1SdmR5NVlUVXhJZEhSd1VtVnhkV1Z6ZER0Y2JuMWNibVZzYzJVZ2UxeHVJQ0IwYUhKdmR5QmNJazV2SUhkcGJtUnZkeXdnVjBGVUxsd2lYRzU5WEc0aVhYMD0iXX0=
